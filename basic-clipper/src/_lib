mod dsp;

use std::sync::Arc;

use nih_plug::{
	prelude::*,
	util::db_to_gain,
};

nih_export_clap!(Clipper);

#[derive(Params)]
struct Parameters {
	#[id = "threshold"]
	threshold: FloatParam,
	#[id = "input-gain"]
	input_gain: FloatParam,
	#[id = "output-gain"]
	output_gain: FloatParam,
}

impl Default for Parameters {
	fn default() -> Self {
		let p = |name: &str, default: f32, min: f32, max: f32| {
			FloatParam::new(name, default, FloatRange::Skewed {
				min: db_to_gain(min),
				max: db_to_gain(max),
				factor: FloatRange::gain_skew_factor(min, max),
			})
			.with_unit(" dB")
			.with_value_to_string(formatters::v2s_f32_gain_to_db(2))
			.with_string_to_value(formatters::s2v_f32_gain_to_db())
		};

		Self {
			threshold: p("Threshold", 0.0, -30.0, 15.0),
			input_gain: p("Input Gain", 0.0, -30.0, 30.0),
			output_gain: p("Output Gain", 0.0, -30.0, 30.0),
		}
	}
}

#[derive(Default)]
struct Clipper {
	params: Arc<Parameters>,
}

impl ClapPlugin for Clipper {
	const CLAP_DESCRIPTION: Option<&'static str> = Some("Basic hard clipper");
	const CLAP_FEATURES: &'static [ClapFeature] = &[
		ClapFeature::AudioEffect,
		ClapFeature::Distortion,
		ClapFeature::Mono,
		ClapFeature::Stereo,
	];
	const CLAP_ID: &'static str = "insomnia.basic-clipper";
	const CLAP_MANUAL_URL: Option<&'static str> = None;
	const CLAP_SUPPORT_URL: Option<&'static str> = None;
}

impl Plugin for Clipper {
	type BackgroundTask = ();
	type SysExMessage = ();

	const AUDIO_IO_LAYOUTS: &'static [AudioIOLayout] = &[AudioIOLayout {
		main_input_channels: Some(new_nonzero_u32(2)),
		main_output_channels: Some(new_nonzero_u32(2)),
		aux_input_ports: &[],
		aux_output_ports: &[],
		names: PortNames {
			layout: Some("Stereo"),
			main_input: Some("Input"),
			main_output: Some("Output"),
			aux_inputs: &[],
			aux_outputs: &[],
		},
	}];
	const EMAIL: &'static str = "";
	const NAME: &'static str = "Basic Clipper";
	const URL: &'static str = "https://github.com/insomnimus/basic-clipper";
	const VENDOR: &'static str = "Insomnia";
	const VERSION: &'static str = env!("CARGO_PKG_VERSION");

	fn params(&self) -> Arc<dyn Params> {
		Arc::clone(&self.params) as Arc<dyn Params>
	}

	fn process(
		&mut self,
		buf: &mut Buffer,
		_aux: &mut AuxiliaryBuffers,
		_context: &mut impl ProcessContext<Self>,
	) -> ProcessStatus {
		let threshold = db_to_gain(self.params.threshold.value());

		for mut samples in buf.iter_samples() {
			for sample in samples.iter_mut() {
				*sample = sample.clamp(-threshold, threshold);
			}
		}

		ProcessStatus::Normal
	}
}
